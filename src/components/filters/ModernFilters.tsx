import { motion } from 'framer-motion';import { Filter, X, Search, Zap, TrendingUp, Building, Lightbulb } from 'lucide-react';import { StartupPhase, FundingStage } from '@/types';const PHASES: StartupPhase[] = ['ideation', 'building', 'fundraising', 'active', 'exited', 'paused'];const INDUSTRIES = ['AI/ML', 'FinTech', 'HealthTech', 'E-commerce', 'SaaS', 'CleanTech', 'EdTech', 'Other'];const FUNDING_STAGES: FundingStage[] = ['bootstrapped', 'pre-seed', 'seed', 'series-a', 'series-b', 'series-c'];interface ModernFiltersProps {  filters: {    searchQuery: string;    selectedPhases: StartupPhase[];    selectedIndustries: string[];    selectedFundingStages: FundingStage[];    showNeedsFunding: boolean;  };  onSearchChange: (query: string) => void;  onPhaseChange: (phases: StartupPhase[]) => void;  onIndustryChange: (industries: string[]) => void;  onFundingStageChange: (stages: FundingStage[]) => void;  onNeedsFundingChange: (show: boolean) => void;  onClearAll: () => void;  activeFiltersCount: number;}export default function ModernFilters({  filters,  onSearchChange,  onPhaseChange,  onIndustryChange,  onFundingStageChange,  onNeedsFundingChange,  onClearAll,  activeFiltersCount,}: ModernFiltersProps) {    const togglePhase = (phase: StartupPhase) => {    if (filters.selectedPhases.includes(phase)) {      onPhaseChange(filters.selectedPhases.filter(p => p !== phase));    } else {      onPhaseChange([...filters.selectedPhases, phase]);    }  };  const toggleIndustry = (industry: string) => {    if (filters.selectedIndustries.includes(industry)) {      onIndustryChange(filters.selectedIndustries.filter(i => i !== industry));    } else {      onIndustryChange([...filters.selectedIndustries, industry]);    }  };  const toggleFundingStage = (stage: FundingStage) => {    if (filters.selectedFundingStages.includes(stage)) {      onFundingStageChange(filters.selectedFundingStages.filter(s => s !== stage));    } else {      onFundingStageChange([...filters.selectedFundingStages, stage]);    }  };  const getPhaseIcon = (phase: StartupPhase) => {    switch (phase) {      case 'ideation': return <Lightbulb size={16} />;      case 'building': return <Building size={16} />;      case 'fundraising': return <TrendingUp size={16} />;      case 'active': return <Zap size={16} />;      default: return <Filter size={16} />;    }  };  const getPhaseColor = (phase: StartupPhase) => {    switch (phase) {      case 'ideation': return 'bg-yellow-100 text-yellow-800 border-yellow-200';      case 'building': return 'bg-blue-100 text-blue-800 border-blue-200';      case 'fundraising': return 'bg-purple-100 text-purple-800 border-purple-200';      case 'active': return 'bg-green-100 text-green-800 border-green-200';      case 'exited': return 'bg-cyan-100 text-cyan-800 border-cyan-200';      case 'paused': return 'bg-gray-100 text-gray-800 border-gray-200';      default: return 'bg-gray-100 text-gray-800 border-gray-200';    }  };  return (    <motion.div      initial={{ opacity: 0, y: 20 }}      animate={{ opacity: 1, y: 0 }}      transition={{ duration: 0.5, delay: 0.2 }}      className="modern-card p-6 mb-8 space-y-6"    >      {/* Header */}      <div className="flex items-center justify-between">        <div className="flex items-center gap-3">          <Filter className="text-primary" size={20} />          <h3 className="text-lg font-semibold">Filters</h3>          {activeFiltersCount > 0 && (            <span className="px-2 py-1 bg-primary/10 text-primary text-xs font-medium rounded-full">              {activeFiltersCount}            </span>          )}        </div>        {activeFiltersCount > 0 && (          <button            onClick={onClearAll}            className="flex items-center gap-2 text-gray-500 hover:text-gray-700 text-sm transition-colors"          >            <X size={16} />            Clear All          </button>        )}      </div>      {/* Search */}      <div className="relative">        <Search size={18} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />        <input          type="text"          placeholder="Search startups, industries, locations..."          value={filters.searchQuery}          onChange={(e) => onSearchChange(e.target.value)}          className="w-full pl-10 pr-4 py-3 bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-xl text-sm focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary transition-all"        />      </div>      {/* Phase Filters */}      <div className="space-y-3">        <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center gap-2">          <Zap size={16} />          Phase        </h4>        <div className="flex flex-wrap gap-2">          {PHASES.map((phase) => (            <button              key={phase}              onClick={() => togglePhase(phase)}              className={`flex items-center gap-2 px-3 py-2 rounded-lg border text-sm font-medium transition-all capitalize ${                filters.selectedPhases.includes(phase)                  ? getPhaseColor(phase)                  : 'bg-white dark:bg-gray-800 text-gray-600 dark:text-gray-400 border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700'              }`}            >              {getPhaseIcon(phase)}              {phase}            </button>          ))}        </div>      </div>      {/* Industry Filters */}      <div className="space-y-3">        <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center gap-2">          <Building size={16} />          Industry        </h4>        <div className="flex flex-wrap gap-2">          {INDUSTRIES.map((industry) => (            <button              key={industry}              onClick={() => toggleIndustry(industry)}              className={`px-3 py-2 rounded-lg border text-sm font-medium transition-all ${                filters.selectedIndustries.includes(industry)                  ? 'bg-primary/10 text-primary border-primary/20'                  : 'bg-white dark:bg-gray-800 text-gray-600 dark:text-gray-400 border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700'              }`}            >              {industry}            </button>          ))}        </div>      </div>      {/* Funding Stage Filters */}      <div className="space-y-3">        <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center gap-2">          <TrendingUp size={16} />          Funding Stage        </h4>        <div className="flex flex-wrap gap-2">          {FUNDING_STAGES.map((stage) => (            <button              key={stage}              onClick={() => toggleFundingStage(stage)}              className={`px-3 py-2 rounded-lg border text-sm font-medium transition-all capitalize ${                filters.selectedFundingStages.includes(stage)                  ? 'bg-emerald-100 text-emerald-800 border-emerald-200'                  : 'bg-white dark:bg-gray-800 text-gray-600 dark:text-gray-400 border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700'              }`}            >              {stage.replace('-', ' ')}            </button>          ))}        </div>      </div>      {/* Special Filters */}      <div className="space-y-3">        <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300">Special</h4>        <div className="flex flex-wrap gap-2">          <button            onClick={() => onNeedsFundingChange(!filters.showNeedsFunding)}            className={`flex items-center gap-2 px-3 py-2 rounded-lg border text-sm font-medium transition-all ${              filters.showNeedsFunding                ? 'bg-orange-100 text-orange-800 border-orange-200'                : 'bg-white dark:bg-gray-800 text-gray-600 dark:text-gray-400 border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700'            }`}          >            <TrendingUp size={16} />            Seeking Funding          </button>        </div>      </div>    </motion.div>  );}